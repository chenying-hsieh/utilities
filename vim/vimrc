
" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Enable line number
set number

" Enable auto indent
set autoindent

" Turns on highlighting for matched search patterns
" (use :nohlsearch inside vim to turn off highlights
" after a search)
set hlsearch

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Boost up history recording
set history=500

" Enable limited line numbering
set ruler

set wildmenu

" // The switch of the Source Explorer
nmap <F8> :SrcExplToggle<CR>

" // Set the height of Source Explorer window
let g:SrcExpl_winHeight = 8

" // Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 100

" // Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"

" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

" // In order to avoid conflicts, the Source Explorer should know what plugins
" // except itself are using buffers. And you need add their buffer names into
" // below listaccording to the command ":buffers!"
let g:SrcExpl_pluginList = [
        \ "__Tag_List__",
        \ "_NERD_tree_"
    \ ]

" // Enable/Disable the local definition searching, and note that this is not
" // guaranteed to work, the Source Explorer doesn't check the syntax for now.
" // It only searches for a match with the keyword according to command 'gd'
let g:SrcExpl_searchLocalDef = 1

" // Do not let the Source Explorer update the tags file when opening
let g:SrcExpl_isUpdateTags = 0

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
" // create/update the tags file
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."

" // Set "<F12>" key for updating the tags file artificially
let g:SrcExpl_updateTagsKey = "<F12>"

" // Set "<F3>" key for displaying the previous definition in the jump list
let g:SrcExpl_prevDefKey = "<F3>"

" // Set "<F4>" key for displaying the next definition in the jump list
let g:SrcExpl_nextDefKey = "<F4>"

" config for NERD Tree
nmap <F7> :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 25
let g:NERDTreeWinPos = "right"
au VimEnter * NERDTreeClose

" Config for taglist
 au VimEnter * Tlist
 nmap <F6> :TlistToggle<CR>
 let g:Tlist_WinWidth = 25
 let g:Tlist_Use_Left_Window = 1
 let g:Tlist_Show_One_File = 1 "show tags of only one file
 map <C-F1> :ta

" NERD Tree support tabs in vim
let g:nerdtree_tabs_open_on_console_startup=0

" Config for cscope
if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    "set csqf=s-,c-,d-,i-,t-,e-
    "set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  cnoreabbrev csa cs add
  cnoreabbrev csf cs find
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help

  map <C-F2> :cs find c
  map <C-F5> :cs find e
  map <F5> :!cscope -Rbq<CR>:cs reset<CR><CR>
  command -nargs=0 Cscope cs add $VIMSRC/src/cscope.out $VIMSRC/src
endif

" move tabs to the end for new, single buffers (exclude splits)
autocmd BufNew * if winnr('$') == 1 | tabmove99 | endif

" minibuffer explorer
  let g:miniBufExplMapWindowNavVim = 1
"  let g:miniBufExplMapWindowNavArrows = 1
  let g:miniBufExplMapCTabSwitchBufs = 1
"  let g:miniBufExplModSelTarget = 1

" GRB: use fancy buffer closing that doesn't close the split
cnoremap <expr> bd (getcmdtype() == ':' ? 'Bclose' : 'bd')

" Remove trailing spaces on save
autocmd BufWritePre * %s/\s\+$//e

hi Directory guifg=#FF0000 ctermfg=red

colors torte


au BufRead,BufNewFile *.go set filetype=go
" set rtp+=$GOROOT/misc/vim
set rtp+=~/.vim/syntax
filetype plugin indent on
syntax on

"
" Project specific settings
"
function! SetupEnvironment()
	let l:path = expand('%:p')
	if l:path =~ '/home/roger/work/rocksdb_helium/he-rocksdb'
		setlocal expandtab smarttab textwidth=0
		setlocal tabstop=4 shiftwidth=4
	"elseif l:path =~ '/home/user/projects'
	"	setlocal tabstop=4 shiftwidth=4 noexpandtab
	endif
endfunction
"autocmd! BufReadPost,BufNewFile * call SetupEnvironment()

" Switching between tabs
map <F9> :bp<CR>
map <F10> :bn<CR>
