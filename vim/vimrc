"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Enable line number
set number

" Enable auto indent
set autoindent

" Turns on highlighting for matched search patterns
" (use :nohlsearch inside vim to turn off highlights
" after a search)
set hlsearch

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Boost up history recording
set history=500

" Enable limited line numbering
set ruler

set wildmenu
" Don't offer to open certain files/directories
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.ico
set wildignore+=*.pdf,*.psd,*.o

set matchpairs=(:),{:},[:],<:>

set updatetime=1250

" config for NERD Tree
nmap <F7> :NERDTreeToggle<CR>
let g:NERDTreeWinSize = 25
let g:NERDTreeWinPos = "right"
let g:NERDTreeShowBookmarks=1
au VimEnter * NERDTreeClose

" Config for taglist
" au VimEnter * Tlist
" nmap <F6> :TlistToggle<CR>
" let g:Tlist_WinWidth = 25
" let g:Tlist_Use_Left_Window = 1
" let g:Tlist_Show_One_File = 1 "show tags of only one file
" map <C-F1> :ta

" TagBar
nmap <F6> :TagbarToggle<CR>
" Put tagbar on the left window
let g:tagbar_position = 'topleft vertical'

" Better match tags list
"nnoremap <C-]> :tab tjump <C-r><C-w><CR>
"nnoremap <C-]> <C-w><C-]><C-w>T

" NERD Tree support tabs in vim
let g:nerdtree_tabs_open_on_console_startup=0

" Config for cscope
if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    "set csqf=s-,c-,d-,i-,t-,e-
    "set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  cnoreabbrev csa cs add
  cnoreabbrev csf cs find
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help

  map <C-F2> :cs find c
  map <C-F5> :cs find e
  map <F5> :!cscope -Rbq<CR>:cs reset<CR><CR>:ctags -R<CR>
  command -nargs=0 Cscope cs add $VIMSRC/src/cscope.out $VIMSRC/src
endif

function! Csc()
  cscope find c <cword>
  copen
endfunction
command! Csc call Csc()

" move tabs to the end for new, single buffers (exclude splits)
autocmd BufNew * if winnr('$') == 1 | tabmove | endif

" GRB: use fancy buffer closing that doesn't close the split
cnoremap <expr> bd (getcmdtype() == ':' ? 'Bclose' : 'bd')

" Remove trailing spaces on save
autocmd BufWritePre * %s/\s\+$//e

"colors torte
"hi Directory guifg=#FF0000 ctermfg=red

set incsearch

" dark background
"colorscheme wombat256
highlight Normal guibg=black guifg=white
highlight Visual term=reverse cterm=reverse guibg=Grey guifg=LightBlue gui=none
highlight Pmenu ctermbg=gray guibg=gray
set background=dark
set t_Co=256

" Enable highlight groups (highlights.vim)
let g:match_maps = 1

au BufRead,BufNewFile *.go set filetype=go
" set rtp+=$GOROOT/misc/vim
set rtp+=~/.vim/syntax
filetype plugin indent on
syntax on

" minibuffer explorer
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplMapWindowNavArrows = 1
"let g:miniBufExplMapCTabSwitchBufs = 1
"let g:miniBufExplModSelTarget = 1
map <Leader>t :TMiniBufExplorer<cr>

" Switching between tabs
map <F9> :bp<CR>
map <F10> :bn<CR>

" signcolumn for older versions (for vim-gitgutter)
highlight! link SignColumn LineNr
"set signcolumn = yes
autocmd BufEnter * sign define dummy
autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')

" vim-gitgutter
let g:gitgutter_map_keys = 0
let g:gitgutter_enabled = 1
let g:gitgutter_signs = 1
let g:gitgutter_highlight_lines = 0
let g:gitgutter_highlight_linenrs = 0
let g:gitgutter_async = 0
let g:gitgutter_preview_win_floating = 0
let g:gitgutter_use_location_list = 0

" vim-gitgutter mapping
let mapleader=","
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" use cursor line highlighting
if version >= 700
	"set cursorline
endif

" quick esapce in INSERT mode
imap jj <esc>
imap JJ <esc>

" find files and populate the quickfix list
fun! FindFiles(filename)
  let error_file = tempname()
  silent exe '!find . -name "'.a:filename.'" | xargs file | sed "s/:/:1:/" > '.error_file
  set errorformat=%f:%l:%m
  exe "cfile ". error_file
  copen
  call delete(error_file)
endfun
command! -nargs=1 FindFile call FindFiles(<q-args>)

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab


" install vim plugins in .vim/bundle
"execute pathogen#infect()

" clang-complete
"let g:clang_library_path='<path-to-llvm-lib>/llvm-3.8/lib'

"" YCM
"let g:ycm_clangd_binary_path = "<path-to-clangd>/clangd"
let g:ycm_auto_trigger = 1
let g:ycm_auto_hover = ''
nmap <leader>D <plug>(YCMHover)
nmap <leader>rr :YcmCompleter GoToReferences<CR>
nmap <leader>dc :YcmCompleter GoToDeclaration<CR>
nmap <leader>df :YcmCompleter GoToDefinition<CR>

" C++ jump prev/next methods
"nnoremap <M-J> /\v^(\w+\s+)?\w+::\w+\(.*\)
"nnoremap <M-K> ?\v^(\w+\s+)?\w+::\w+\(.*\)

" Go to previous file
nmap <leader>bb <c-^><cr>

" Go to File under cursor
nnoremap gf :vertical wincmd f<CR>

" status line
set statusline=%f\ %{FugitiveStatusline()}%h%w%m%r\ %=%(%l,%c%V\ %=\ %P%)

" fzf Files
nmap <silent> ; :Buffers<CR>
nmap <silent> <leader>; :Files<CR>
nmap <silent> <leader>m :History<CR>

" project vimrc
set exrc
set secure

